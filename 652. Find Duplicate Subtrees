/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    unordered_map<string,int>mep;
    string calit(TreeNode *root,vector<TreeNode*>&rec){
        if (!root) return "_";
        string s;
        s = calit(root->left, rec) + ',' + calit(root->right, rec) + ',' + to_string(root->val);
        mep[s]++;
        if (mep[s] == 2) rec.push_back(root);
        return s;
    }
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>rec;
        calit(root,rec);
        return rec;
    }
};
